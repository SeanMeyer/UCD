<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1488231320326">{:repl-history {:ide [], :local [&quot;(get-position 0 [[1 2 3] [3 4 5] [6 0 8]])&quot; &quot;(do-actions game-start)&quot; &quot;(get-position 0 [[1 0 2] [3 4 5] [6 7 8]])&quot; &quot;(remove #(nil? %) ())&quot; &quot;(get-actions [[1 0 2] [3 4 5] [6 7 8]])&quot; &quot;(do-actions [[1 0 2] [3 4 5] [6 7 8]])&quot; &quot;(uniform-cost-search game-start my-test)&quot; &quot;(let [node {:state game-start :parent nil :path-cost 0 :total-cost 0}\n      frontier (priority-map-keyfn :total-cost (:state node) node)])&quot; &quot;(let [node {:state game-start :parent nil :path-cost 0 :total-cost 0}\n      frontier (priority-map-keyfn :total-cost (:state node) node)]\n  frontier)&quot; &quot;(conj frontier {[[3 1 2] [3 0 5] [6 7 8]], {:state [[3 1 2] [0 4 5] [6 7 8]], :parent nil, :path-cost 0, :total-cost -1}})&quot; &quot;(conj frontier {[[3 1 2] [3 0 5] [6 7 8]], {:state [[3 1 2] [0 4 5] [6 7 8]], :parent nil, :path-cost 0, :total-cost 3}})&quot; &quot;(def node {:state game-start :parent nil :path-cost 0 :total-cost 0})&quot; &quot;(def frontier (priority-map-keyfn :total-cost (:state node) node))\n&quot; &quot;(peek frontier)&quot; &quot;frontier&quot; &quot;(val (peek frontier))&quot; &quot;(pop frontier)&quot; &quot;(count [[0 1 2] [3 4 5] [6 7 8] [[3 1 2] [0 4 5] [6 7 8]]])&quot; &quot;(conj [[0 2 2]] [[3 3 3]])&quot; &quot;(into [[0 2 2]] [[3 3 3]])&quot; &quot;(conj [] [[0 2 2]] [[3 3 3]])&quot; &quot;(count (uniform-cost-search game-start match-goal?))&quot; &quot;(uniform-cost-search game-start match-goal?)&quot; &quot;(build-solution-path (uniform-cost-search game-start match-goal?))&quot; &quot;(def data 2)&quot; &quot;(backtrack1 game-start)&quot; &quot;(first [game-start])&quot; &quot;(contains? [[3 1 2] [4 0 5] [6 7 8]] [[[3 1 2] [4 0 5] [6 7 8]]])&quot; &quot;(contains? [[3 1 2] [4 0 5] [6 7 8]] [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(first {game-start 1})&quot; &quot; {game-start 1}&quot; &quot;(contains? (first {game-start game-start}) {game-start game-start})&quot; &quot;(contains? (first {game-start game-start}) {game-start})\n                                            &quot; &quot;{game-start}&quot; &quot;(contains? [[3 1 2] [4 0 5] [6 7 8]] {game-start game-start})&quot; &quot;(contains? {game-start game-start} [[3 1 2] [4 0 5] [6 7 8]] )&quot; &quot;(contains? game-start [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(rest {game-start game-start})&quot; &quot;(rest {game-start :blank})&quot; &quot;(first (key {game-start :blank}))&quot; &quot;(key (first {game-start :blank}))&quot; &quot;(some? game-start [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(.contians game-start [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(.contains game-start [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;game-start&quot; &quot;(.contains [game-start] [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(contains? [game-start] [[3 1 2] [4 0 5] [6 7 8]])&quot; &quot;(backtrack1 [game-start])&quot; &quot;(count (backtrack1 [game-start]))&quot; &quot;(print-stats (backtrack1 [game-start]))&quot; &quot;(print-stats (backtrack1 [game-start]) :backtrack)&quot; &quot;(+ 1 2)&quot; &quot;(loop [bound 0]\n  (let [solution (backtrack1 [game-start] bound)]\n    (if (= solution :fail)\n      (do\n        (println bound \&quot;: Cumulative boards generated: \&quot; @boards-generated)\n        (recur (inc bound)))\n      (do\n        (println bound \&quot;: Cumulative boards generated: \&quot; @boards-generated)\n        (println \&quot;Solution Length: \&quot; (count solution))))))&quot; &quot;(uniform-cost-search game-start match-goal? uniform-cost-heuristic)&quot; &quot;(print-stats (uniform-cost-search game-start match-goal? uniform-cost-heuristic))&quot; &quot;(print-stats (uniform-cost-search game-start match-goal? uniform-cost-heuristic) :graph)&quot; &quot;(backtrack1 [{:state game-start}] 15)&quot; &quot;(-main)&quot; &quot;(-main \&quot;1-move.json\&quot;)&quot; &quot;(def game-json\n  (json/read-str \&quot;{\\\&quot;n\\\&quot; : 3,\\n \\\&quot;start\\\&quot; : [[0,1,2],\\n            [3,4,5],\\n\\t\\t    [6,7,8]],\\n \\\&quot;goal\\\&quot; : [[0,1,2],\\n           [3,4,5],\\n\\t\\t   [6,7,8]]}\&quot; :key-fn keyword))&quot; &quot;game-json&quot; &quot;(contains? game-json :N)&quot; &quot;(contains? game-json :n)&quot; &quot;(validate-json game-json)&quot; &quot;(-main \&quot;25-move.json\&quot;)&quot; &quot;(-main \&quot;25-moves.json\&quot;)&quot; &quot;(-main \&quot;20-moves.json\&quot;)&quot; &quot;(contains? {} 3)&quot; &quot;(key {game-start})&quot; &quot;(key {game-start game-start})&quot; &quot;{game-start game-start}&quot; &quot;(first {game-start game-start})&quot; &quot;(first (keys {game-start game-start}))&quot; &quot;(contains? {game-start game-start} [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(first (first {game-start game-start}))&quot; &quot;(contains? (rest {game-start game-start}) [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(contains? (rest {game-start game-start game-start game-start}) [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(contains? (rest {game-start game-start game-start game-start})\n           [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(contains? (rest {game-start game-start 2 game-start})\n           [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(contains? (rest #{game-start}) [[3 7 1] [6 4 2] [0 8 5]])&quot; &quot;(rest #{1 2 3 4 5})&quot; &quot;(dissoc #{1 2 3 4 5} 1)&quot; &quot;(dissoc 1 #{1 2 3 4 5})&quot; &quot;(disj #{1 2 3 4 5} 1)&quot; &quot;(disj #{1 2 3 4 5} 6)&quot; &quot;(first #{1 2 3 4 5})&quot; &quot;(cons 6 #{1 2 3 4 5})&quot; &quot;(conj 6 #{1 2 3 4 5})&quot; &quot;(conj #{1 2 3 4 5} 6)&quot; &quot;(conj #{1 2 3 4 5} 7)&quot; &quot;(-main \&quot;3-moves.json\&quot;)&quot; &quot;(-main \&quot;2-moves.json\&quot;)&quot; &quot;(-main \&quot;15-moves.json\&quot;)&quot; &quot;(-main \&quot;10-moves.json\&quot;)&quot; &quot;(test \&quot;10-moves.json\&quot;)&quot; &quot;(hash-test \&quot;10-moves.json\&quot;)&quot; &quot;(hash-test \&quot;15-moves.json\&quot;)&quot; &quot;(hash-test \&quot;20-moves.json\&quot;)&quot; &quot;(hash-test \&quot;problem-1.json\&quot;)&quot; &quot;(-main \&quot;problem-1.json\&quot;)&quot; &quot;(-main \&quot;5-moves.json\&quot;)&quot;], :remote []}}</component>
</project>