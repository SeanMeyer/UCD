<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1488846263016">{:repl-history {:ide [], :local [&quot;(map #(update-in % :state identity) p)&quot; &quot;(map #(update-in % :state inc) p)&quot; &quot;(map #(update-in % [:state] identity p))&quot; &quot;(update-in p [:state] identity)&quot; &quot;(map #(update-in % [:state] identity) p)&quot; &quot;(map #(update-in % [:state] (static-eval (:state %) 1 2)) p)&quot; &quot;(map #(assoic-in % [:state] (static-eval (:state %) 1 2)) p)&quot; &quot;(map #(assoc-in % [:state] (static-eval (:state %) 1 2)) p)&quot; &quot;(sort-by :state (ordered-moves (:grid precept) 1 2))&quot; &quot;(reverse (sort-by :state (ordered-moves (:grid precept) 1 2)))&quot; &quot;(map :move\n     (reverse\n       (sort-by :state (ordered-moves (:grid precept) 1 2))))&quot; &quot;(sort-by &gt; '(0 1 2 3 4 5 6))&quot; &quot;(sort-by #(Math/abs (- % 3)) '(0 1 2 3 4 5 6))&quot; &quot;(count (:grid precept))&quot; &quot;(/ 2 7)&quot; &quot;(int (/ 2 7))&quot; &quot;(int (/ 7 2))&quot; &quot;(/ 7 2)&quot; &quot;(time (negamax (:grid precept) 6 -inf inf 1 true 1 2))&quot; &quot;(time (negamax (:grid precept) 6 1 true 1 2))&quot; &quot;(negamax-ab (:grid precept) 4 1 true 1 2)&quot; &quot;(negamax-ab (:grid precept) 4 1 -inf inf true 1 2)&quot; &quot;(negamax (:grid precept) 3 1 -inf inf true 1 2)&quot; &quot;(negamax-ab (:grid precept) 3 1 -inf inf true 1 2)&quot; &quot;(ordered-moves (:grid precept) 1 2)&quot; &quot;(-main x)&quot; &quot;(-main 0)&quot; &quot;(sort-by #(Math/abs (4 - %)) (valid-moves (:grid precept)))&quot; &quot;(sort-by #(Math/abs (- 4 %)) (valid-moves (:grid precept)))&quot; &quot;(negamax-ab (:grid precept) 5 -inf inf 1 true 1 2)&quot; &quot;(negamax (:grid precept) 4 -inf inf 1 true 1 2)&quot; &quot;(negamax (:grid precept) 4 1 true 1 2)&quot; &quot;(negamax (:grid precept) 3 1 true 1 2)&quot; &quot;(negamax (:grid precept) 3 1 true 2 1)&quot; &quot;(negamax-ab (:grid precept) 4 -inf inf 1 true 2 1)&quot; &quot;(negamax-ab (:grid precept) 1 -inf inf 1 true 1 2)&quot; &quot;(negamax-ab (:grid precept) 3 -inf inf 1 true 1 2)&quot; &quot;(negamax-ab (:grid precept) 4 -inf inf 1 true 1 2)&quot; &quot;(def testgrid [[0,0,0,0,1,2],[0,0,0,0,0,2],[0,0,0,0,1,1],[0,0,0,2,1,2],[0,0,0,2,1,1],[0,0,0,0,0,2],[0,0,0,0,0,2]])&quot; &quot;(static-eval testgrid 1 2)&quot; &quot;(perform-move\n  (valid-moves (:grid precept))\n  (:grid precept)\n  1)&quot; &quot;(perform-move\n  (first (valid-moves (:grid precept)))\n  (:grid precept)\n  1)&quot; &quot;(static-eval (perform-move\n               (first (valid-moves (:grid precept)))\n               (:grid precept)\n               1))&quot; &quot;(negamax-ab (:grid precept) 2 -inf inf 1 true 1 2)&quot; &quot;(negamax-ab (:grid precept) 2 -inf inf 4 true 1 2)&quot; &quot;(&gt; inf inf)&quot; &quot;(&gt; inf 5)&quot; &quot;(&gt; inf -inf)&quot; &quot;(&gt;= -inf inf)&quot; &quot;(static-eval (perform-move\n               (first (valid-moves (:grid precept)))\n               (:grid precept)\n               1)\n             1 2)&quot; &quot;(first [0 0])&quot; &quot;(seq? [0 0])&quot; &quot;(vec? [0 0])&quot; &quot;(coll? [0 0])&quot; &quot;(max-key (:value) {:value Infinity, :move 6} {:value 2, :move 1})&quot; &quot;(max-key (:value) {:value 10, :move 6} {:value 2, :move 1})&quot; &quot;(max-key #(:value %) {:value 10, :move 6} {:value 2, :move 1})&quot; &quot;(max-key #(:value %) {:value 10, :move 6} {:value 22, :move 1})&quot; &quot;(time (negamax-ab-recur (:grid precept) 1 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 3 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 2 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 4 -inf inf 1 true 1 2))&quot; &quot;(time (negamax (:grid precept) 4 -inf inf 1 true 1 2))&quot; &quot;(time (negamax (:grid precept) 4 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 4 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) -inf inf 4 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 4 -inf inf  1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 4 -inf inf  1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 3 -inf inf  1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 6 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 7 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 3 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 2 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 7 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 8 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 8 -inf inf 1 1 2))&quot; &quot;(get-positions {:gird precept} 1)&quot; &quot;(get-positions {:grid precept} 1)&quot; &quot;(static-eval (:grid precept) 1 2)&quot; &quot;(valid-moves (:grid precept))&quot; &quot;(vec (valid-moves (:grid precept)))&quot; &quot;(rest (vec (valid-moves (:grid precept))))&quot; &quot;(seq? (rest (vec (valid-moves (:grid precept)))))&quot; &quot;(time (negamax-ab (:grid precept) 4 -inf inf 1 1 2))&quot; &quot;(parallel-negamax (:grid precept) 4 1 2)&quot; &quot;(time (negamax-ab-recur (:grid precept) 5 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 6 -inf inf 1 true 1 2))&quot; &quot;(get-positions (:grid precept) 1)&quot; &quot;(* 0 inf)&quot; &quot;(eval-by-positions-needed (:grid precept)\n                          (get-positions (:grid precept) 1))&quot; &quot;(time (negamax-ab (:grid precept) 2 -inf inf 5 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 1 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab-recur (:grid precept) 4 -inf inf 1 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 5 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 2 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 3 -inf inf 1 true 1 2))&quot; &quot;(time (negamax-ab (:grid precept) 4 -inf inf 1 true 1 2))&quot; &quot;(time (parallel-negamax (:grid precept) 5 1 2))&quot; &quot;(time (parallel-negamax (:grid precept) 6 1 2))&quot; &quot;(eval-by-positions-needed\n  (:grid precept) (get-positions (:grid precept) 1))&quot; &quot;(time (parallel-negamax (:grid precept) 4 1 2))&quot;], :remote []}}</component>
</project>